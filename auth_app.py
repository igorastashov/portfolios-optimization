import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import glob
from datetime import datetime, timedelta
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from portfolios_optimization.data_loader import load_price_data, load_return_data, load_model_actions
from portfolios_optimization.portfolio_optimizer import optimize_markowitz_portfolio
from portfolios_optimization.portfolio_analysis import calculate_metrics, plot_efficient_frontier
from portfolios_optimization.visualization import plot_portfolio_performance, plot_asset_allocation
from portfolios_optimization.model_trainer import train_model, load_trained_model
from portfolios_optimization.authentication import (
    initialize_users_file, register_user, authenticate_user, get_user_info,
    update_user_portfolio, get_user_portfolios, get_user_portfolio, get_portfolio_with_quantities
)

# –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app_pages import (
    render_dashboard, render_portfolio_optimization, render_model_training, 
    render_model_comparison, render_backtest, render_about, render_account_dashboard,
    render_transactions_manager
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Portfolio Optimization System",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
initialize_users_file()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'username' not in st.session_state:
    st.session_state.username = None
if 'login_message' not in st.session_state:
    st.session_state.login_message = None
if 'active_page' not in st.session_state:
    st.session_state.active_page = "Login"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
def logout():
    st.session_state.logged_in = False
    st.session_state.username = None
    st.session_state.active_page = "Login"
    st.session_state.login_message = "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@st.cache_data(ttl=3600)
def load_data():
    # –î–∞–Ω–Ω—ã–µ —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤
    price_data = load_price_data()
    
    # –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
    model_returns = load_return_data()
    
    # –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –º–æ–¥–µ–ª–µ–π
    model_actions = load_model_actions()
    
    return price_data, model_returns, model_actions

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
price_data, model_returns, model_actions = load_data()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
assets = price_data.columns.tolist() if not price_data.empty else []

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("Investment Portfolio Monitoring & Optimization System")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if not st.session_state.logged_in:
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    # –í–∫–ª–∞–¥–∫–∞ –≤—Ö–æ–¥–∞
    with tab1:
        st.header("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        
        # –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        with st.form("login_form"):
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            submit_button = st.form_submit_button("–í–æ–π—Ç–∏")
            
            if submit_button:
                success, message = authenticate_user(username, password)
                
                if success:
                    st.session_state.logged_in = True
                    st.session_state.username = username
                    st.session_state.active_page = "Dashboard"
                    st.success(message)
                    st.rerun()
                else:
                    st.error(message)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
        if st.session_state.login_message:
            st.info(st.session_state.login_message)
            st.session_state.login_message = None
    
    # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    with tab2:
        st.header("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        with st.form("register_form"):
            new_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", type="password")
            email = st.text_input("Email")
            register_button = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            
            if register_button:
                if not new_username or not new_password:
                    st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                elif new_password != confirm_password:
                    st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                else:
                    success, message = register_user(new_username, new_password, email)
                    
                    if success:
                        st.success(message)
                        st.info("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                    else:
                        st.error(message)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
else:
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.header(f"–ü—Ä–∏–≤–µ—Ç, {st.session_state.username}!")
    
    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        logout()
        st.rerun()
    
    # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page_options = ["–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏", "–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", "Dashboard", "Portfolio Optimization", "Model Training", "Model Comparison", "Backtest Results", "About"]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è radio –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    try:
        current_page_index = page_options.index(st.session_state.active_page)
    except ValueError:
        current_page_index = 0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        st.session_state.active_page = page_options[0]

    selected_page = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
        page_options,
        index=current_page_index, # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º radio —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∏–∑ session_state
        key="main_nav_radio" # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –î–†–£–ì–£–Æ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ radio
    if selected_page != st.session_state.active_page:
        st.session_state.active_page = selected_page
        st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ

    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if st.session_state.active_page == "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç":
        st.header("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user_info(st.session_state.username)
        
        if user_info:
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.subheader("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
                st.write(f"**Email:** {user_info.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                st.write(f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user_info.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:** {user_info.get('last_login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            st.subheader("–í–∞—à–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–∏")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            portfolio_data = get_portfolio_with_quantities(st.session_state.username)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
            has_assets = portfolio_data and any(portfolio_data["quantities"].values())
            
            if has_assets:
                # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
                portfolio_items = []
                
                total_portfolio_value = 0
                total_profit_loss = 0
                
                for asset, quantity in portfolio_data["quantities"].items():
                    if quantity > 0:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
                        current_price = price_data[asset].iloc[-1] if asset in price_data.columns else 0
                        
                        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
                        avg_buy_price = portfolio_data["avg_prices"].get(asset, 0)
                        
                        # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
                        current_value = quantity * current_price
                        invested_value = quantity * avg_buy_price
                        profit_loss = current_value - invested_value
                        profit_loss_percent = (profit_loss / invested_value * 100) if invested_value > 0 else 0
                        
                        total_portfolio_value += current_value
                        total_profit_loss += profit_loss
                        
                        portfolio_items.append({
                            "–ê–∫—Ç–∏–≤": asset,
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                            "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏": avg_buy_price,
                            "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞": current_price,
                            "–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": current_value,
                            "P&L": profit_loss,
                            "P&L (%)": profit_loss_percent
                        })
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è", f"${total_portfolio_value:,.2f}")
                
                with col2:
                    # –ó–Ω–∞–∫ –¥–ª—è P&L
                    if total_profit_loss >= 0:
                        st.metric("–û–±—â–∏–π P&L", f"${total_profit_loss:,.2f}", delta=f"{total_profit_loss/total_portfolio_value*100:.2f}%")
                    else:
                        st.metric("–û–±—â–∏–π P&L", f"-${abs(total_profit_loss):,.2f}", delta=f"{total_profit_loss/total_portfolio_value*100:.2f}%", delta_color="inverse")
                
                with col3:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ 24 —á–∞—Å–∞
                    portfolio_24h_ago = 0
                    for item in portfolio_items:
                        asset = item["–ê–∫—Ç–∏–≤"]
                        quantity = item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                        price_24h_ago = price_data[asset].iloc[-2] if asset in price_data.columns and len(price_data) > 1 else item["–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"]
                        portfolio_24h_ago += quantity * price_24h_ago
                    
                    change_24h = (total_portfolio_value - portfolio_24h_ago) / portfolio_24h_ago * 100 if portfolio_24h_ago > 0 else 0
                    
                    st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á", 
                             f"${total_portfolio_value - portfolio_24h_ago:,.2f}", 
                             delta=f"{change_24h:.2f}%",
                             delta_color="normal" if change_24h >= 0 else "inverse")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
                portfolio_df = pd.DataFrame(portfolio_items)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–æ–≤
                if not portfolio_df.empty:
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                    portfolio_df = portfolio_df.sort_values("–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", ascending=False)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    formatted_df = portfolio_df.copy()
                    formatted_df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = formatted_df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].apply(lambda x: f"{x:,.8f}")
                    formatted_df["–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"] = formatted_df["–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"].apply(lambda x: f"${x:,.2f}")
                    formatted_df["–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"] = formatted_df["–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"].apply(lambda x: f"${x:,.2f}")
                    formatted_df["–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] = formatted_df["–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].apply(lambda x: f"${x:,.2f}")
                    formatted_df["P&L"] = formatted_df["P&L"].apply(
                        lambda x: f"${x:,.2f}" if x >= 0 else f"-${abs(x):,.2f}"
                    )
                    formatted_df["P&L (%)"] = formatted_df["P&L (%)"].apply(
                        lambda x: f"+{x:.2f}%" if x > 0 else (f"{x:.2f}%" if x < 0 else "0.00%")
                    )
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    st.dataframe(formatted_df, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                    fig = px.pie(
                        portfolio_df,
                        values="–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                        names="–ê–∫—Ç–∏–≤",
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    
                    st.info("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è, –¥–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∞–∫—Ç–∏–≤—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏'.")
            else:
                st.info("""
                –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.
                
                –ß—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å:
                1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏'
                2. –ù–∞ –≤–∫–ª–∞–¥–∫–µ '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é' –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –∞–∫—Ç–∏–≤—ã
                3. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                
                –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å –∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç'.
                """)
                
                # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–∞–∑–¥–µ–ª—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏"
                if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–∫—Ç–∏–≤–∞–º–∏", key="goto_manage_assets_from_cabinet"):
                    st.session_state.active_page = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏"
                    st.rerun()
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –µ–¥–∏–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å—Ç–∏–ª–µ Bybit
    elif st.session_state.active_page == "–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç":
        st.header("–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - –î–∏–Ω–∞–º–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

        # --- Portfolio Visualization Code Start ---
        from collections import OrderedDict # Ensure OrderedDict is imported

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
        days_history = 180
        # –£–∫–∞–∂–∏—Ç–µ "—Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é" –¥–∞—Ç—É –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∑–∞–¥
        # TODO: Consider making this dynamic or configurable via st.date_input
        report_date = pd.Timestamp('2025-04-19')

        # --- –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ ---
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        portfolio_data_viz = {
            "ID": [2, 0, 1, 3],
            # –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –¥–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–∫—É–ø–∫–∞–º –¥–ª—è —ç—Ç–∏—Ö —Å—É–º–º!
            "–î–∞—Ç–∞": ["2025-02-09T14:21:24.000", "2025-04-01T14:21:01.000", "2025-03-05T14:21:17.000", "2025-01-12T14:29:48.000"],
            "–ê–∫—Ç–∏–≤": ["LTCUSDT", "BNBUSDT", "BTCUSDT", "HBARUSDT"],
            "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": [10000.00, 1000.00, 1000.00, 784.00] # –°—É–º–º—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        }
        portfolio_df_viz = pd.DataFrame(portfolio_data_viz)
        portfolio_df_viz['–î–∞—Ç–∞'] = pd.to_datetime(portfolio_df_viz['–î–∞—Ç–∞'])
        portfolio_df_viz = portfolio_df_viz.sort_values(by='–î–∞—Ç–∞').reset_index(drop=True)

        # --- –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ ---
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @st.cache_data –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        @st.cache_data(ttl=3600) # –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ 1 —á–∞—Å
        def load_and_preprocess_historical_data(assets_list):
            csv_base_path = 'D:\\__projects__\\diploma\\portfolios-optimization\\data' # –ü—É—Ç—å –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º
            all_prices = {}
            data_found = False
            for asset in assets_list:
                file_path = os.path.join(csv_base_path, f'{asset}_hourly_data.csv')
                try:
                    df = pd.read_csv(file_path)
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                    if 'Open time' not in df.columns:
                        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏
                        time_col = next((col for col in df.columns if 'time' in col.lower()), None)
                        if not time_col: raise ValueError(f"Missing time column for {asset}")
                        df.rename(columns={time_col: 'Open time'}, inplace=True)
                    if 'Close' not in df.columns:
                         # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ —Ü–µ–Ω—ã
                        price_col = next((col for col in df.columns if 'close' in col.lower()), None)
                        if not price_col: raise ValueError(f"Missing close price column for {asset}")
                        df.rename(columns={price_col: 'Close'}, inplace=True)

                    df['Open time'] = pd.to_datetime(df['Open time'])
                    df = df.set_index('Open time')
                    df = df[['Close']].rename(columns={'Close': f'{asset}_Price'})
                    df[f'{asset}_Price'] = df[f'{asset}_Price'].astype(float)
                    all_prices[asset] = df
                    data_found = True
                except FileNotFoundError:
                    st.warning(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –¥–ª—è {asset}: {e}")
            
            if not data_found:
                return pd.DataFrame() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            historical_data = pd.concat(all_prices.values(), axis=1)
            return historical_data

        required_assets = portfolio_df_viz['–ê–∫—Ç–∏–≤'].unique().tolist()
        historical_prices_viz = load_and_preprocess_historical_data(required_assets)

        if historical_prices_viz.empty:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ. –ì—Ä–∞—Ñ–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω.")
            st.stop() # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞, –µ—Å–ª–∏ 'today' –Ω–µ –∑–∞–¥–∞–Ω–∞
        if report_date is None:
             if not historical_prices_viz.empty:
                 report_date = historical_prices_viz.index.max()
             else:
                  st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
                  st.stop()

        start_date_history = report_date - pd.Timedelta(days=days_history)

        # --- –®–∞–≥ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ---
        historical_prices_filtered_viz = historical_prices_viz[
            (historical_prices_viz.index >= start_date_history) &
            (historical_prices_viz.index <= report_date)
        ].copy()

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        historical_prices_filtered_viz = historical_prices_filtered_viz.ffill().bfill()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        if historical_prices_filtered_viz.isnull().values.any():
            st.warning("–í –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–ø—É—Å–∫–∏ (NaN) –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –°—Ç—Ä–æ–∫–∏ —Å NaN –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")
            # st.dataframe(historical_prices_filtered_viz[historical_prices_filtered_viz.isnull().any(axis=1)]) # –û—Ç–ª–∞–¥–∫–∞
            historical_prices_filtered_viz = historical_prices_filtered_viz.dropna()

        if historical_prices_filtered_viz.empty:
            st.error(f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {start_date_history} - {report_date} –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ì—Ä–∞—Ñ–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω.")
            st.stop()

        # –ü–æ–∏—Å–∫ —Ü–µ–Ω –ø–æ–∫—É–ø–∫–∏
        portfolio_df_viz['Purchase_Price_Actual'] = np.nan
        portfolio_df_viz['Actual_Purchase_Time_Index'] = pd.NaT

        st.write("–ü–æ–∏—Å–∫ —Ü–µ–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏...")
        for index, row in portfolio_df_viz.iterrows():
            asset = row['–ê–∫—Ç–∏–≤']
            purchase_date = row['–î–∞—Ç–∞']
            price_col = f'{asset}_Price'

            if price_col not in historical_prices_filtered_viz.columns:
                st.warning(f"–°—Ç–æ–ª–±–µ—Ü —Ü–µ–Ω {price_col} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞ {asset} –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                continue

            relevant_prices = historical_prices_filtered_viz[historical_prices_filtered_viz.index >= purchase_date]

            if not relevant_prices.empty:
                actual_purchase_time_index = relevant_prices.index[0]
                purchase_price = historical_prices_filtered_viz.loc[actual_purchase_time_index, price_col]

                if pd.notna(purchase_price) and purchase_price > 0:
                    portfolio_df_viz.loc[index, 'Purchase_Price_Actual'] = purchase_price
                    portfolio_df_viz.loc[index, 'Actual_Purchase_Time_Index'] = actual_purchase_time_index
                else:
                    st.warning(f"–ù–∞–π–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ ({purchase_price}) –¥–ª—è {asset} –Ω–∞ {actual_purchase_time_index}. –ü–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
                    portfolio_df_viz.loc[index, 'Actual_Purchase_Time_Index'] = pd.NaT
            else:
                st.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {asset} –Ω–∞ –∏–ª–∏ –ø–æ—Å–ª–µ {purchase_date} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–æ {report_date}. –ü–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
                portfolio_df_viz.loc[index, 'Actual_Purchase_Time_Index'] = pd.NaT

        # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
        initial_portfolio_size_viz = len(portfolio_df_viz)
        portfolio_df_viz.dropna(subset=['Actual_Purchase_Time_Index', 'Purchase_Price_Actual'], inplace=True)
        final_portfolio_size_viz = len(portfolio_df_viz)

        st.write(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫: {initial_portfolio_size_viz}, —É—á—Ç–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω: {final_portfolio_size_viz}")
        if final_portfolio_size_viz == 0:
              st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –î–∞—Ç—ã –ø–æ–∫—É–ø–æ–∫ –∏ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV.")
              st.stop()

        # –†–∞—Å—á–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        historical_prices_filtered_viz['Total_Value_Relative'] = 0.0
        st.write("–†–∞—Å—á–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")

        progress_bar = st.progress(0)
        total_steps = len(historical_prices_filtered_viz.index)

        for i, current_time_index in enumerate(historical_prices_filtered_viz.index):
            current_total_value = 0.0
            for _, purchase_row in portfolio_df_viz.iterrows():
                purchase_time_index = purchase_row['Actual_Purchase_Time_Index']
                if current_time_index >= purchase_time_index:
                    initial_investment = purchase_row['–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å']
                    purchase_price = purchase_row['Purchase_Price_Actual']
                    asset = purchase_row['–ê–∫—Ç–∏–≤']
                    price_col = f'{asset}_Price'
                    current_price = historical_prices_filtered_viz.loc[current_time_index, price_col]

                    if pd.notna(current_price) and current_price > 0:
                        price_ratio = current_price / purchase_price
                        current_investment_value = initial_investment * price_ratio
                    else:
                        current_investment_value = 0 # –û–±–Ω—É–ª—è–µ–º –≤–∫–ª–∞–¥, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞

                    current_total_value += current_investment_value

            historical_prices_filtered_viz.loc[current_time_index, 'Total_Value_Relative'] = current_total_value
            progress_bar.progress((i + 1) / total_steps) # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä

        st.write("–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
        progress_bar.empty() # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä

        # --- –®–∞–≥ 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ Streamlit ---
        st.subheader("–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        fig_viz, ax_viz = plt.subplots(figsize=(12, 6)) # –£–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º–µ—Ä –¥–ª—è Streamlit
        plt.style.use('seaborn-v0_8-darkgrid')

        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        ax_viz.plot(historical_prices_filtered_viz.index, historical_prices_filtered_viz['Total_Value_Relative'],
                label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ú–µ—Ç–æ–¥ –æ—Ç–Ω–æ—Å–∏—Ç. –∏–∑–º–µ–Ω–µ–Ω–∏–π)', color='green', linewidth=2)

        # –û—Ç–º–µ—Ç–∫–∏ –æ –ø–æ–∫—É–ø–∫–∞—Ö
        unique_labels_legend_viz = set()
        portfolio_in_range_viz = portfolio_df_viz[portfolio_df_viz['Actual_Purchase_Time_Index'] >= historical_prices_filtered_viz.index.min()]

        for _, row in portfolio_in_range_viz.iterrows():
            plot_time = row['Actual_Purchase_Time_Index']
            if plot_time in historical_prices_filtered_viz.index:
                value_at_purchase = historical_prices_filtered_viz.loc[plot_time, 'Total_Value_Relative']
                label_text_marker = f'–ü–æ–∫—É–ø–∫–∞ {row["–ê–∫—Ç–∏–≤"]}'
                current_label_for_legend = label_text_marker if label_text_marker not in unique_labels_legend_viz else ""
                if current_label_for_legend: unique_labels_legend_viz.add(label_text_marker)

                ax_viz.scatter(plot_time, value_at_purchase, color='red', s=50, zorder=5,
                           label=current_label_for_legend, marker='o', edgecolors='black')

                ax_viz.annotate(f" +${row['–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å']:,.2f}\n ({row['–ê–∫—Ç–∏–≤']})",
                            xy=(plot_time, value_at_purchase), xytext=(10, 10),
                            textcoords='offset points', ha='left', va='bottom', fontsize=8,
                            bbox=dict(boxstyle="round,pad=0.3", fc="wheat", alpha=0.6),
                            arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=0.2", color='grey'))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        ax_viz.set_title(f'–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞ {days_history} –¥–Ω–µ–π', fontsize=12)
        ax_viz.set_xlabel('–î–∞—Ç–∞', fontsize=10)
        ax_viz.set_ylabel('–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USDT)', fontsize=10)
        ax_viz.grid(True, which='major', linestyle='--', linewidth=0.5)
        ax_viz.tick_params(axis='x', rotation=30, labelsize=8)
        ax_viz.tick_params(axis='y', labelsize=8)
        ax_viz.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{x:,.0f}'))

        # –õ–µ–≥–µ–Ω–¥–∞
        handles_viz, labels_viz = ax_viz.get_legend_handles_labels()
        if handles_viz: # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –ª–µ–≥–µ–Ω–¥–µ
             if '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ú–µ—Ç–æ–¥ –æ—Ç–Ω–æ—Å–∏—Ç. –∏–∑–º–µ–Ω–µ–Ω–∏–π)' not in labels_viz and ax_viz.get_lines():
                 line_handle_viz = ax_viz.get_lines()[0]
                 handles_viz.insert(0, line_handle_viz)
                 labels_viz.insert(0, line_handle_viz.get_label())
             by_label_viz = OrderedDict(zip(labels_viz, handles_viz))
             ax_viz.legend(by_label_viz.values(), by_label_viz.keys(), loc='best', fontsize=8)

        fig_viz.tight_layout()
        st.pyplot(fig_viz) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Streamlit

        # --- –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"):
            st.write("–î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –ø–æ–∫—É–ø–∫–∏:")
            st.dataframe(portfolio_df_viz[['–î–∞—Ç–∞', '–ê–∫—Ç–∏–≤', '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', 'Purchase_Price_Actual', 'Actual_Purchase_Time_Index']])

            st.write(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π):")
            price_cols_to_show_viz = sorted([f'{a}_Price' for a in portfolio_df_viz['–ê–∫—Ç–∏–≤'].unique() if f'{a}_Price' in historical_prices_filtered_viz.columns])
            st.dataframe(historical_prices_filtered_viz[['Total_Value_Relative'] + price_cols_to_show_viz].head())

            st.write(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π):")
            st.dataframe(historical_prices_filtered_viz[['Total_Value_Relative'] + price_cols_to_show_viz].tail())
        # --- Portfolio Visualization Code End ---

    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    elif st.session_state.active_page == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏":
        render_transactions_manager(st.session_state.username, price_data, assets)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ app_pages.py
    elif st.session_state.active_page == "Dashboard":
        render_dashboard(st.session_state.username, price_data, model_returns, model_actions, assets)
    
    elif st.session_state.active_page == "Portfolio Optimization":
        render_portfolio_optimization(st.session_state.username, price_data, assets)
    
    elif st.session_state.active_page == "Model Training":
        render_model_training(st.session_state.username, price_data, assets)
    
    elif st.session_state.active_page == "Model Comparison":
        render_model_comparison(st.session_state.username, model_returns, model_actions, price_data)
    
    elif st.session_state.active_page == "Backtest Results":
        render_backtest(st.session_state.username, model_returns, price_data)
    
    elif st.session_state.active_page == "About":
        render_about() 


'''
poetry run streamlit run auth_app.py
'''