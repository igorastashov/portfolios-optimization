import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import glob
from datetime import datetime, timedelta
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from portfolios_optimization.data_loader import load_price_data, load_return_data, load_model_actions
from portfolios_optimization.portfolio_optimizer import optimize_markowitz_portfolio
from portfolios_optimization.portfolio_analysis import calculate_metrics, plot_efficient_frontier
from portfolios_optimization.visualization import plot_portfolio_performance, plot_asset_allocation
from portfolios_optimization.model_trainer import train_model, load_trained_model
from portfolios_optimization.authentication import (
    initialize_users_file, register_user, authenticate_user, get_user_info,
    update_user_portfolio, get_user_portfolios, get_user_portfolio
)

# –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app_pages import (
    render_dashboard, render_portfolio_optimization, render_model_training, 
    render_model_comparison, render_backtest, render_about, render_account_dashboard
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Portfolio Optimization System",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
initialize_users_file()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'username' not in st.session_state:
    st.session_state.username = None
if 'login_message' not in st.session_state:
    st.session_state.login_message = None
if 'active_page' not in st.session_state:
    st.session_state.active_page = "Login"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
def logout():
    st.session_state.logged_in = False
    st.session_state.username = None
    st.session_state.active_page = "Login"
    st.session_state.login_message = "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@st.cache_data(ttl=3600)
def load_data():
    # –î–∞–Ω–Ω—ã–µ —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤
    price_data = load_price_data()
    
    # –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
    model_returns = load_return_data()
    
    # –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –º–æ–¥–µ–ª–µ–π
    model_actions = load_model_actions()
    
    return price_data, model_returns, model_actions

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
price_data, model_returns, model_actions = load_data()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
assets = price_data.columns.tolist() if not price_data.empty else []

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("Investment Portfolio Monitoring & Optimization System")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if not st.session_state.logged_in:
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    # –í–∫–ª–∞–¥–∫–∞ –≤—Ö–æ–¥–∞
    with tab1:
        st.header("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        
        # –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        with st.form("login_form"):
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            submit_button = st.form_submit_button("–í–æ–π—Ç–∏")
            
            if submit_button:
                success, message = authenticate_user(username, password)
                
                if success:
                    st.session_state.logged_in = True
                    st.session_state.username = username
                    st.session_state.active_page = "Dashboard"
                    st.success(message)
                    st.rerun()
                else:
                    st.error(message)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
        if st.session_state.login_message:
            st.info(st.session_state.login_message)
            st.session_state.login_message = None
    
    # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    with tab2:
        st.header("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        with st.form("register_form"):
            new_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", type="password")
            email = st.text_input("Email")
            register_button = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            
            if register_button:
                if not new_username or not new_password:
                    st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                elif new_password != confirm_password:
                    st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                else:
                    success, message = register_user(new_username, new_password, email)
                    
                    if success:
                        st.success(message)
                        st.info("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                    else:
                        st.error(message)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
else:
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.header(f"–ü—Ä–∏–≤–µ—Ç, {st.session_state.username}!")
    
    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        logout()
        st.rerun()
    
    # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
        ["–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", "–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", "Dashboard", "Portfolio Optimization", "Model Training", "Model Comparison", "Backtest Results", "About"]
    )
    
    st.session_state.active_page = page
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if page == "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç":
        st.header("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user_info(st.session_state.username)
        
        if user_info:
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.subheader("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
                st.write(f"**Email:** {user_info.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                st.write(f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user_info.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:** {user_info.get('last_login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            st.subheader("–í–∞—à–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–∏")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            portfolios = get_user_portfolios(st.session_state.username)
            
            if portfolios:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
                tab1, tab2 = st.tabs(["–ú–æ–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–∏", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"])
                
                with tab1:
                    # –í—ã–±–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    selected_portfolio = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å",
                        options=portfolios
                    )
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    portfolio_data = get_user_portfolio(st.session_state.username, selected_portfolio)
                    
                    if portfolio_data:
                        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {selected_portfolio}")
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {portfolio_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                        st.write(f"**–¢–∏–ø:** {portfolio_data.get('type', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π')}")
                        st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {portfolio_data.get('last_updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                        if "assets" in portfolio_data:
                            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            portfolio_df = pd.DataFrame({
                                '–ê–∫—Ç–∏–≤': list(portfolio_data['assets'].keys()),
                                '–í–µ—Å': list(portfolio_data['assets'].values())
                            })
                            
                            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
                            fig = px.pie(
                                portfolio_df,
                                values='–í–µ—Å',
                                names='–ê–∫—Ç–∏–≤',
                                title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è {selected_portfolio}"
                            )
                            st.plotly_chart(fig)
                            
                            # –¢–∞–±–ª–∏—Ü–∞ —Å –∞–∫—Ç–∏–≤–∞–º–∏
                            st.table(portfolio_df)
                            
                            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                            st.subheader("–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                            
                            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤
                            if not price_data.empty:
                                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                                portfolio_assets = list(portfolio_data['assets'].keys())
                                if all(asset in price_data.columns for asset in portfolio_assets):
                                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
                                    asset_data = price_data[portfolio_assets]
                                    
                                    # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
                                    returns = asset_data.pct_change().dropna()
                                    
                                    # –í–µ—Å–∞ –∞–∫—Ç–∏–≤–æ–≤
                                    weights = np.array(list(portfolio_data['assets'].values()))
                                    
                                    # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                                    portfolio_returns = np.matmul(returns, weights)
                                    portfolio_returns_series = pd.Series(portfolio_returns, index=returns.index)
                                    
                                    # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                                    cum_returns = portfolio_returns_series.cumsum()
                                    
                                    fig = px.line(
                                        cum_returns, 
                                        title="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è",
                                        labels={"value": "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "index": "–î–∞—Ç–∞"}
                                    )
                                    st.plotly_chart(fig)
                                    
                                    # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                                    total_return = cum_returns.iloc[-1]
                                    annual_return = (1 + total_return) ** (252 / len(cum_returns)) - 1
                                    volatility = portfolio_returns_series.std() * np.sqrt(252)
                                    sharpe_ratio = annual_return / volatility
                                    
                                    col1, col2, col3 = st.columns(3)
                                    col1.metric("–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{total_return*100:.2f}%")
                                    col2.metric("–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{annual_return*100:.2f}%")
                                    col3.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", f"{sharpe_ratio:.2f}")
                                else:
                                    st.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω")
                            else:
                                st.warning("–î–∞–Ω–Ω—ã–µ —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                
                with tab2:
                    # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                    
                    with st.form("new_portfolio_form"):
                        portfolio_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                        portfolio_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                        
                        # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–æ–≤
                        selected_assets = st.multiselect(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤—ã",
                            options=assets,
                            default=assets[:5] if len(assets) >= 5 else assets
                        )
                        
                        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –≤–µ—Å–æ–≤ –∞–∫—Ç–∏–≤–æ–≤
                        asset_weights = {}
                        
                        if selected_assets:
                            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                            initial_weight = 1.0 / len(selected_assets)
                            
                            for asset in selected_assets:
                                weight = st.slider(
                                    f"–í–µ—Å {asset}",
                                    min_value=0.0,
                                    max_value=1.0,
                                    value=initial_weight,
                                    step=0.01,
                                    key=f"weight_{asset}"
                                )
                                asset_weights[asset] = weight
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –≤–µ—Å–æ–≤
                            total_weight = sum(asset_weights.values())
                            st.write(f"–û–±—â–∞—è —Å—É–º–º–∞ –≤–µ—Å–æ–≤: {total_weight:.2f}")
                            
                            if abs(total_weight - 1.0) > 0.01:
                                st.warning("–°—É–º–º–∞ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 1.0")
                        
                        submit_button = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                        
                        if submit_button:
                            if not portfolio_name:
                                st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                            elif not selected_assets:
                                st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤")
                            elif abs(total_weight - 1.0) > 0.01:
                                st.error("–°—É–º–º–∞ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 1.0")
                            else:
                                # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
                                portfolio_data = {
                                    "description": portfolio_description,
                                    "type": "custom",
                                    "assets": asset_weights,
                                    "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                    "last_updated": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                }
                                
                                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                                success, message = update_user_portfolio(
                                    st.session_state.username, 
                                    portfolio_name, 
                                    portfolio_data
                                )
                                
                                if success:
                                    st.success(message)
                                    st.info("–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                                else:
                                    st.error(message)
            else:
                st.info("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å!")
                
                # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                with st.form("first_portfolio_form"):
                    portfolio_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                    portfolio_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                    
                    # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–æ–≤
                    selected_assets = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤—ã",
                        options=assets,
                        default=assets[:5] if len(assets) >= 5 else assets
                    )
                    
                    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –≤–µ—Å–æ–≤ –∞–∫—Ç–∏–≤–æ–≤
                    asset_weights = {}
                    
                    if selected_assets:
                        # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                        initial_weight = 1.0 / len(selected_assets)
                        
                        for asset in selected_assets:
                            weight = st.slider(
                                f"–í–µ—Å {asset}",
                                min_value=0.0,
                                max_value=1.0,
                                value=initial_weight,
                                step=0.01,
                                key=f"weight_{asset}"
                            )
                            asset_weights[asset] = weight
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –≤–µ—Å–æ–≤
                        total_weight = sum(asset_weights.values())
                        st.write(f"–û–±—â–∞—è —Å—É–º–º–∞ –≤–µ—Å–æ–≤: {total_weight:.2f}")
                        
                        if abs(total_weight - 1.0) > 0.01:
                            st.warning("–°—É–º–º–∞ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 1.0")
                    
                    submit_button = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                    
                    if submit_button:
                        if not portfolio_name:
                            st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                        elif not selected_assets:
                            st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤")
                        elif abs(total_weight - 1.0) > 0.01:
                            st.error("–°—É–º–º–∞ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 1.0")
                        else:
                            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
                            portfolio_data = {
                                "description": portfolio_description,
                                "type": "custom",
                                "assets": asset_weights,
                                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                "last_updated": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            }
                            
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                            success, message = update_user_portfolio(
                                st.session_state.username, 
                                portfolio_name, 
                                portfolio_data
                            )
                            
                            if success:
                                st.success(message)
                                st.info("–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                            else:
                                st.error(message)
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –µ–¥–∏–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å—Ç–∏–ª–µ Bybit
    elif page == "–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç":
        render_account_dashboard(st.session_state.username, price_data, assets)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ app_pages.py
    elif page == "Dashboard":
        render_dashboard(price_data, model_returns, model_actions, assets)
    
    elif page == "Portfolio Optimization":
        render_portfolio_optimization(price_data, assets)
    
    elif page == "Model Training":
        render_model_training(price_data, assets)
    
    elif page == "Model Comparison":
        render_model_comparison(model_returns, model_actions)
    
    elif page == "Backtest Results":
        render_backtest(model_returns)
    
    elif page == "About":
        render_about() 