[alembic]
# path to migration scripts
script_location = alembic

# sqlalchemy.url specifies the database connection URL.
# This is the only line that needs to be changed for most setups.
# sqlalchemy.url = driver://user:pass@localhost/dbname

# Semicolon-separated list of supported database dialects string,
# for supporting Alembic's offline mode.
# offline_supported_dialects = sqlite;postgresql

# timezone for generated migration filenames
# filename_timezone = Utc

# template for migration filenames
# revision_environment = false
# file_template = %%(rev)s_%%(slug)s

# Or, use a DottedObjectName to a package or module that will define the template
# file_template = myapp.models:custom_file_template

# enable or disable the autogeneration feature. See the docs for details.
# revision_environment = false

# whether or not to run environment.py only once when invoking a command.
# See the "Running the Environment Script Multiple Times" section for background.
# once_only = false

# set to true to mirror the full context from the environment into the migration_context
# when performing offline context.get_x_argument() calls.
# full_environment_names = false

[post_write_hooks]
# This section defines scripts or Python functions that are run
# on newly generated revision files.  See the documentation for
# details and examples.
# hooks = myhook1, myhook2
# myhook1.type = exec
# myhook1.entrypoint = /path/to/my_script.sh %%(revision)s
# myhook2.type = python_function
# myhook2.entrypoint = myapp.tools:hook_function_1


# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S

#truncate_large_values = 100

# Attributes for the offline_run_helpers context dictionary, passed
# to the env.py script. These are referenced by the context.get_x_argument()
# method.
# x_arg = my_special_value 