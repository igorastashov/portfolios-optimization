[alembic]
# path to migration scripts
script_location = backend/app/alembic

# Semicolon-separated list of supported database dialect revisions.
# (These are NOT Alembic revision numbers)
# This is used to populate the "revision_environment" key in the
# migration context, which can then be used by env.py to enable or
# disable certain migration features based on the target database.
# revision_environment = false

# True if the revision_environment key should be silently populated
# if the database is not among the configured dialects.
# populate_revision_environment_silently = false

# template for migration file names, e.g. "%%(rev)s_%%(slug)s.py"
# (requires Alembic 0.7.3)
# file_template = %%(rev)s_%%(slug)s

# Set to 'true' to allow .pyc and .pyo files without a source .py file
# (requires Python 2.6 or 2.7 for an effect)
# sourceless = false

# Relative path from the config file to the directory where versions are stored.
# version_locations = %(here)s/versions
#  versions_%(branch_label)s = %(here)s/versions/branch_%(branch_label)s

# set true to use UTC in revision migration filenames
# new_revision_utc = false

# Database connection URL (will be overridden by env.py)
sqlalchemy.url = driver://user:pass@localhost/dbname

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S 